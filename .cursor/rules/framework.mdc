---
description: 
globs: 
---
# Project Context

Our project is built using Quasar framework (version 2.17.7), Pinia for state management (version 3.0.1), Axios for HTTP requests (version 1.8.2), pinia-plugin-state-persistence for state persistence (version 4.2.0), and Tiptap for text editing functionality (version 2.11.5). The project follows Quasar's recommended folder structure.

# Coding Style

## Naming Conventions

- Use small camel case for variable names, function names, and method names (e.g., myVariable, myFunction).

- Use Pascal case for class names and component names (e.g., MyClassName, MyComponent).

## Indentation

- Use 4-space indentation for code.

## Syntax Preferences

- Prefer using the Composition API (setup syntax sugar) for component definitions in Quasar.

# Library Usage

## Prioritization of Installed Libraries

- When generating code, prefer using the libraries already installed in package.json.

- If a required functionality is not provided by installed libraries, consider using standard JavaScript or suggest adding a new library in a comment with reasoning.

## Suggestions for New Libraries

- If you know of a better or updated version of a library that is not currently installed, mention in a comment that it's available and could be considered for future updates.

# Code Quality

## General Guidelines

- Ensure that the code is precise, efficient, readable, and free of bugs.

- Follow best practices for Quasar, Pinia, and other libraries used.

- Handle all possible error scenarios, such as network errors with Axios.

## Specific Library Instructions

### Quasar

- Use Quasar's Composition API for component definitions.

- Follow Quasar's component structure and styling guidelines.

- Ensure responsiveness and performance optimizations as per Quasar's best practices.

### Pinia

- Use Pinia for state management.

- Define stores with clear names and well-organized state, getters, and actions.

- Use pinia-plugin-state-persistence for state persistence as needed.

- Avoid unnecessary getters; use them only for computed values.

- Use actions for state modifications to keep the code organized.

### Axios

- Use Axios for all HTTP requests.

- Handle errors appropriately, such as network errors or server-side errors, using try-catch blocks with async/await.

- Configure Axios with appropriate headers and settings as per project requirements.

### Tiptap

- Use Tiptap for text editing functionality.

- Ensure that the correct extensions are used as per project requirements.

- Handle content securely to prevent XSS vulnerabilities.

# File Patterns

## *.vue

- Use Quasar's Composition API for component definitions.

- Follow Quasar's component structure and styling guidelines.

- Use small camel case for variable names, function names, and method names within the component.

- Use Pascal case for the component name.

## *.js, *.ts

- Use small camel case for variable names, function names, and method names.

- Use Pascal case for class names.

- Use 4-space indentation.